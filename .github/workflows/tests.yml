name: C/C++ Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release, Debug]
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake valgrind
        
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install cmake valgrind
        
    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
        choco install make
        
    - name: Create build directory
      run: cmake -E make_directory build
      
    - name: Configure CMake
      run: |
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DBUILD_TESTING=ON
        
    - name: Build project
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }}
        
    - name: Run tests with CTest
      run: |
        cd build
        ctest --output-on-failure -C ${{ matrix.build_type }}
        
    - name: Run tests with Valgrind (Linux only)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd build
        ctest -T memcheck --output-on-failure
        
    - name: Test executable directly
      run: |
        cd build
        ./test_runner  # или имя вашего тестового исполняемого файла

  code-coverage:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install coverage tools
      run: |
        sudo apt-get update
        sudo apt-get install -y gcovr lcov
        
    - name: Configure with coverage
      run: |
        cmake -E make_directory build-coverage
        cd build-coverage
        cmake .. -DCMAKE_BUILD_TYPE=Debug -DENABLE_COVERAGE=ON
        
    - name: Build with coverage
      run: |
        cd build-coverage
        make
        
    - name: Run tests for coverage
      run: |
        cd build-coverage
        ./test_runner
        
    - name: Generate coverage report
      run: |
        cd build-coverage
        gcovr --root .. --exclude tests/ --html --html-details -o coverage_report.html
        
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: build-coverage/coverage_report.html